import ClassicBip
import CanonicalBip
import pandas
import numpy
import itertools

class Feature_selection(object):
	'''
	Feature selection for classification problems
	'''

	def __init__(self, bip, target, thr_dis = 75, thr_corr = 0.89):
		if isinstance(bip, ClassicBip.ClassicBip):
			__type__ = "Classic"
			self.bip = bip
		elif isinstance(bip, CanonicalBip.CanonicalBip):
			__type__ = "Canonical"
			self.bip = bip
		else:
			raise ValueError('Undefined biplotpy class')

		if isinstance(target, pandas.core.series.Series):
			if isinstance(list(set([type(el) for el in target]))[0], (int,float)):
				self.y = target
		elif isinstance(target, numpy.ndarray):
			self.y = target
		else:
			raise ValueError('Nor ndarray numpy nor series pandas type')

		if !isinstance(thr_dis, float):
			raise ValueError('Nor ndarray numpy nor series pandas type')
		elif thr_dis > 100 :
			raise ValueError('thr_dis must be between 25 and 100')
		elif thr_dis < 0 :
			raise ValueError('thr_dis must be positive')

		if __type__ == "Classic":
			Proj = bip.RowCoord.dot(bip.ColCoord.T)
			C = bip.ColCoord
		elif __type__ == "Canonical":
			Proj = bip.Ind_Coord.dot(bip.Var_Coord.T)
			C = bip.Var_Coord

		# Positive rescalation of projections

		v_min = np.array([abs(el) if el < 0 else el for el in Project.min(axis=0)])

		for i, proj in enumerate(Project.T):
			Project[:,i] = proj + v_min[i]
		
		classes = numpy.unique(y)

		# Tracking class index

		IND = []
		for cl in classes:
			ind_class = []
			for i, el in enumerate(y):
				if el == cl:
						ind_class.append(i)
			IND.append(ind_class)

		# Number of combinations

		num_c = int(len(classes)*(len(classes)-1)/2)

		Disc = np.zeros((bip.data.shape[1], num_c))

		comb = np.array(list(itertools.combinations(classes,r=2)))

		# Disc vectors

		for i, cmb in enumerate(comb):
			Disc[:,i] = abs(Project[IND[cmb[0]]].mean(axis=0) - Project[IND[cmb[1]]].mean(axis=0))

		Corr_mat = numpy.tril(numpy.corrcoef(C), -1)

		# Drop correlated variables

		POS = []
		for v in Disc.T:
			for i, el in enumerate(v):
				if el > np.percentile(thr_dis, 75):
					POS.append(i)
		POS = list(set(POS))

		pos_corr = np.where(Corr_matr>thr_corr)
		disc_vect = Disc.sum(axis = 1)

		for i in range(len(pos_corr[0])):
			a = np.array([disc_vect[pos_corr[0][i]],disc_vect[pos_corr[1][i]]])
			POS.pop(POS.index(pos_corr[ np.argwhere(a.min() == a)[0][0] ][0]))

		self.var_sel = bip.col_names[POS]



